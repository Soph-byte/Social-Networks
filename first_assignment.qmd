---
title: "Social_Networks_first_assignment"
format: html
editor: visual
---

# Introduction

This project focuses on the analysis of a bipartite network that represents the Abu Sayyaf Group's involvement in kidnapping events in the Philippines in 2014. The dataset, obtained from the ICON project, links members of the Abu Sayyaf Group with the specific kidnappings they were involved in.

The goal of this analysis is to explore fundamental network properties, such as node connectivity, degree distribution, and overall structure. These properties will allow us to gain insights into the organizational dynamics of the group, which can be reflected in the network's topology.

https://networks.skewed.de/net/kidnappings

Gerdes, L. M., Ringler, K., & Autin, B. (2014). Assessing the Abu Sayyaf Group’s Strategic and Learning Capacities. *Studies in Conflict & Terrorism*, *37*(3), 267–293. https://doi.org/10.1080/1057610X.2014.872021

## Libraries

```{r}
library(readr)
library(igraph)
library(ggplot2)
library(ggraph)
library(dplyr)
```

## Running Code

We load the edges and nodes and create the graph from the data

```{r}
edges <- read_csv("network/edges.csv")
head(edges, 4)

nodes <- read_csv("network/nodes.csv")
head(nodes, 4)

# Buiding a graph from data
g <- graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
```

## Questions

### *1. What is the number of nodes and links?*

Nodes and links are also called vertices and edges. We can check their count with tables or by asking directly for their number:

```{r}
# links/edges
E(g) 
ecount(g) 

# nodes/vertices
V(g) 
vcount(g) 
```

Our dataset has 402 links and 351 nodes

### *2. What is the average degree in the network? And the standard deviation of the degree?*

To calculate the average degree and standard deviation of nodes, we can use the degree values obtained from the following code:

```{r}
deg <- degree(g,mode="all")
```

```{r}
mean(deg)
sd(deg)
```

The average degree of the network is 2.29. This points to a sparse and loosely connected structure, consistent with how clandestine networks often operate: keeping operational cells small to avoid detection. The standard deviation of the degree is 3.89, which is quite high relative to the mean. This suggests a heterogeneous structure: while most nodes are weakly connected, a few nodes are highly connected, likely representing core individuals in the Abu Sayyaf Group or events that involved multiple operatives. This uneven distribution reflects typical features of terrorist or militant group dynamics, where key figures coordinate multiple decentralized actions.

### *3. Plot the degree distribution in linear-linear scale and in log-log-scale. Does it have a typical connectivity? What is the degree of the most connected node?*

```{r}
# linear-linear
ggplot() + 
  geom_histogram(aes(x=degree(g,mode="all"))) + 
  labs(x="Degree",y="Density")

# table of degrees 
table_deg <- data.frame(deg)
table_deg %>% 
  arrange(desc(deg)) %>% 
  head(10)

# max degree node 
max_degree_node <- which.max(deg)
deg[max_degree_node]
```

The histogram illustrates the distribution of node degrees within the network, showing how many connections each node has. From the distribution, it's clear that the vast majority of nodes have a very low degree, typically around 1 or 2 connections: most nodes are minimally connected, indicating a sparse network structure. However, the histogram also reveals a long right tail, meaning that while most nodes are weakly connected, a small number of nodes have a significantly higher degree. The most connected node has 58 connections, with a in comparison way lower second most connected node with 23 connections. Still, in comparison to one or two connections that is quite high. The following eight most connected nodes are around the 17 to 10 connections marks. This pattern suggests a right-skewed or heavy-tailed distribution, where a few highly connected nodes coexist with many low-degree nodes, which would indicate a power-law distribution.

```{r}
# log-log
ggplot() + 
  geom_histogram(aes(x=degree(g, mode="all"))) + 
  scale_x_log10() + 
  scale_y_log10() + 
  labs(x="Degree (log scale)", y="Density (log scale)")
  
```

While with the linear-linear histogram we can observe the skewed distribution of node degrees and the presence of a few highly connected hubs, with the log-log plot we get a better view into the scaling behavior of the network. This plot is created simply by transforming both axes with a common logarithm.

In this plot, the degree distribution appears to align roughly along a straight line in the log-log space. This pattern supports the idea that the degree distribution follows a power-law and hence the network may be scale-free, where a small number of nodes dominate the connectivity, and the probability of a node having a high degree decreases polynomially rather than exponentially.

The few nodes that are highly connected can play a crucial role in the flow of information, connectivity, and resilience of the network. Their presence may also influence the network’s vulnerability as if one of them fails or is removed, it could significantly disrupt the system.

### *4. What is the clustering coefficient (transitivity) in the network?*

```{r}
transitivity(g)
```

The global clustering coefficient (transitivity) of the network is 0, which means that there are no closed triplets, i.e. there are no triangles where three nodes are all directly connected to each other. This suggests that the network is not clustered at all, and that nodes tend to connect in a more tree-like or chain-like structure rather than forming triangleness with tightly knit groups. Such a result indicates a network with no local cohesion, where neighbors of a node are actually never connected to each other.

This result is significant in the context of Abu Sayyaf operations: while limiting collaboration, enhances the group’s resilience against infiltration as each actor is only connected to a "superior" agent.

### *5. What is the assortativity (degree) in the network?*

```{r}
assortativity_degree(g)
```

The assortativity coefficient based on node degree is -0.23, indicating a moderate negative assortativity in the network, where nodes with a high degree tend to connect to nodes with low degree, rather than to other hubs. It seems that in this network the highly connected nods serve as bridges that link many less connected nodes.

Disassortative mixing by degree is normally a pattern found in fictional or artificial networks, which makes it very interesting that it formed here naturally. It reflects a centralized structure where a few key figures repeatedly appear across many separate events, while most events involve only a small number of actors. Hence, for a criminal or militant network it would imply a strategic effort to decentralize risk: central figures maintain influence across various operations without necessarily linking collaborators directly to each other, which may reduce traceability and limit network exposure in case of capture.

### *6. Using the Louvain method, does the network have a community structure? If so, what is its modularity?*

To investigate the structure of the network, we used both the Leiden and Louvain methods.

To use the Louvain algorithm, it is important that we transform our directed network into an undirected network, as it is only designed for undirected networks. We also use the Leiden method as it similar to the Louvain algorithm but works faster (which is not necessary here with our small network but it is still interesting to compare. )

```{r}
set.seed(123)
g_undirected <- as.undirected(g, mode = "collapse") 

# Louvain
louv <- cluster_louvain(g_undirected)

# Leiden
leid <- cluster_leiden(g_undirected)

# Community counts
length(sizes(louv)) # length(louv) also works
length(sizes(leid))

# Modularity
modularity(g_undirected, membership(louv))
modularity(g_undirected, membership(leid))
```

The Louvain method identified ca. 36 communities with a high modularity score of 0.791, indicating a strong community structure. The high modularity suggests that the network contains nodes that are more densely connected within communities than between them, i.e. more densely connected internally than externally, which can be interpreted as meaningful substructures.

The Leiden algorithm, on the other hand, detected 351 communities, corresponding to the total number of nodes in the network. The modularity score of −0.011 indicates that this partition is worse than random, and no significant structural groupings were identified.

Overall, we conclude that the Louvain method seems better suited for detecting structural patterns in the Abu Sayyaf network. To further illustrate the differences between the two methods we visualize them. 

```{r}
par(mfrow = c(1, 2))
plot(louv, g_undirected, 
     vertex.label = "", vertex.size = 5, main = "Louvain Communities")

plot(leid, g_undirected, 
     vertex.label = "", vertex.size = 5, main = "Leiden Communities")

```

The Louvain method clearly identifies larger and cohesive community clusters. These groups are visibly well-defined, with nodes that are tightly connected internally and more loosely connected to other communities. In contrast, the Leiden algorithm divides the network into many small, fragmented communities, often consisting of just one or two nodes. 

We can see where the modularity scores come from, as modularity is really a summary statistic of the network's clustering quality, where the goodness of the partitions are checked. The higher the modularity, the better the description of the network communities are. Hence, the Louvain graph is consistent with a high modularity score, with the negative modularity of Leiden supports the earlier conclusion: Louvain seems more appropriate for revealing community structure in this network.

### *7. Test that the clustering coefficient in the network cannot be statistically explain by a configuration model in which the nodes have the same degree distribution as the original.*

```{r}
# Original clustering coefficient (global transitivity)
observed_transitivity <- transitivity(g)

# 100 null models with same degree distribution
null_transitivities <- replicate(100, {
  transitivity(sample_degseq(degree(g), method = "simple"))
})

# Plot of clustering coefficients distribution from null models
hist(null_transitivities, 
     main = "Null Model Distribution of Clustering Coefficient",
     xlab = "Clustering Coefficient", col = "lightblue", border = "white")
abline(v = observed_transitivity, col = "red", lwd = 2)

```

```{r}
# Empirical p-value
mean(null_transitivities >= observed_transitivity)
```

The empirical p-value is 1, indicating that none of the 100 networks in the configuration model had as low a clustering coefficient as the original, i.e. the actually observed clustering is not higher than expected by chance. This means that the lack of clustering in the Abu Sayyaf network is not a statistical error of its degree distribution, but rather a structurally significant feature that can be fully explained by degree sequence alone.

Such a pattern suggests intentional decentralization, perhaps to reduce the risk of network detection by closely linked groups. It provides support for the notion of a subdivided cell structure typical of underground organizations.

### *8. Visualize the neighborhood of the node with the largest centrality (closeness)*

```{r}
# Closeness centrality
closeness_vals <- closeness(g, mode = "all")

# Node with largest closeness centrality
top_node <- names(which.max(closeness_vals))
top_node

# Ego-graph (1 step neighborhood)
ego_graph <- make_ego_graph(g, order = 1, nodes = top_node)[[1]]

# Plot
plot(ego_graph,
     main = paste("Ego Network of Node with Largest Closeness:", top_node))

```

The ego network of node E13, which has the highest Closeness Centrality in the network, shows a very loose structure as it only connects to one other node. Closeness centraility indicates how “close” a node is to all others in terms of the shortest paths. It measures global position, not local connectivity, hence a node does not require many direct links but that it simply sits at the shortest distance from the rest.

In bipartite networks, event nodes such as E13 achieve high closeness as they act as bridges that connect distant parts of the network. In this case, E13 probably plays an important role as it connects two large parts of the graph via indirect paths. Its centrality does not come from its local connectivity, but from its strategic position in the network. It may serve as an important event that connects actors that would otherwise have no connection.

We can check this with a betweenness centraility, which counts the number of shortest paths that pass through a node: 

```{r}
betweenness(g_undirected)["E13"]
```

Suprisingly, we find that E13 has a betweenness centrality of 0,  meaning no shortest paths pass through it, which completely undermines our initial theory. :/ The explanation for this could be that E13 connects indirectly to distant nodes, but isn’t between other nodes in terms of shortest paths. It’s close to them (short paths to many nodes), but not in between them.

We can try to visualise this. 

```{r}
paths <- shortest_paths(g_undirected, 
                        from = "E13", to = V(g_undirected), 
                        output = "vpath")

subg <- induced_subgraph(g_undirected, vids = unique(unlist(paths$vpath)))

plot(subg, 
     main = "Indirect connections from E13")
```

However, this result raises suspicion about the structure of the overall network. If E13 truly had indirect connections to many distant nodes, we would expect the visualised subgraph to include more than one neighbour but the graph actually reveals just a single connection. E13 may not actually be part of a well-connected structure, but instead exists in a small, disconnected fragment of the graph. Hence it might be one of the lower-level agents of the pirate network.

To understand what is actually going on, we examine closeness centrality scores across all nodes to see whether this pattern is isolated or part of a broader issue in the network structure.

```{r}
btw <- betweenness(g_undirected, weights=E(g_undirected)$value)
cls <- closeness(g_undirected)

table <- data.frame(deg, btw, cls)

table %>% 
  arrange(desc(cls))


```

The first 32 nodes have a closeness centrality of exactly 1, despite having only one connection. This counterintuitive result points towards the network appearing to be disconnected and fragmented, as these nodes are only connected to one other node in small components. Since no other nodes are reachable from them, their sum of distances is technically 1, resulting in a closeness score of 1 under igraph's calculation.

To avoid this problem, we can try to work with largest connected component, which is typically done with disconnected networks. 

```{r}
cc <- components(g_undirected)
head(cc$csize)
sort(cc$csize, decreasing = TRUE)
head(cc$no)
```

There seems to be 26 components, and the largest one has a size of 285, followed by sizes of 9, 4, 3 and 2. This shows how a significant portion of the network is fragmented into many small, disconnected subgraphs. Hence, we have to focus on the largest connected component (Giant Component) for meaningful structural analysis.

```{r}
gGC <- decompose(g_undirected)[[1]]

vcount(gGC)
ecount(gGC)

diameter(g)
diameter(gGC)

plot(gGC)
```


This subgraph has 285 nodes and 457 links. When we compare the diameter (largest distance) of our total network (1) with the diameter of our Giant Component (18), we can see that the overall network appears trivially connected due to many isolated pairs of nodes, while the Giant Component reveals the true structural depth and path diversity of the core network.

We can now recalculate and visualise the neighborhood of the node with the largest closeness. 

```{r}
closeness_vals_GC <- closeness(gGC, mode = "all")
top_node_GC <- names(which.max(closeness_vals_GC))
top_node_GC
ego_graph_GC <- make_ego_graph(gGC, order = 1, nodes = top_node_GC)[[1]]

plot(ego_graph_GC,
     main = paste("Ego Network of Giant Component Node with Largest Closeness:", top_node_GC))
```
The ego network of the node with the highest closeness centrality in the Giant Component shows a strong hub structure. The central node  is directly connected to a large number of other nodes, which are themselves not directly connected to each other. This star-shaped pattern shows that the central node is at a very short distance from many others, resulting in a high closeness score.

In comparison to E13, this node’s centrality is structurally meaningful. It plays a key role in connecting a large portion of the network and minimising the average distance to all other nodes in the Giant Component. In conclusion, this shows that closeness centrality is best interpreted for our network within the largest connected component, where the network's true structure and connectivity are visible.

